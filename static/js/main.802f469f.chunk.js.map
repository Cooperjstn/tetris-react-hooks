{"version":3,"sources":["components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/StartButton.js","components/styles/StyledTetris.js","gameHelpers.js","hooks/usePlayer.js","hooks/useStage.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","React","memo","StyledStage","height","width","Stage","stage","map","row","cell","x","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","StyledTetris","createStage","Array","from","fill","checkCollision","player","moveX","moveY","y","tetromino","pos","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.802f469f.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid': '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0'}, \n    I: {\n        shape: [\n                \n                [0,'I', 0, 0],\n                [0,'I', 0, 0],\n                [0,'I', 0, 0],\n                [0,'I', 0, 0]\n               ],\n            color: '26, 188, 156'\n    },\n    J: {\n        shape: [\n                \n                [0,'J', 0],\n                [0,'J', 0],\n                ['J','J', 0]\n               ],\n            color: '52, 152, 219'\n    },\n    L: {\n        shape: [\n                \n                [0,'L', 0],\n                [0,'L', 0],\n                [0,'L', 'L']\n               ],\n            color: '241, 196, 15'\n    },\n    O: {\n        shape: [\n                \n                ['O','O'],\n                ['O','O'],\n               ],\n            color: '223, 217, 36'\n    },\n    S: {\n        shape: [\n                \n                [0, 'S','S'],\n                ['S','S', 0],\n                [0, 0, 0]\n               ],\n            color: '46, 204, 113'\n    },\n    T: {\n        shape: [\n                \n                [0, 0, 0],\n                ['T','T', 'T'],\n                [0, 'T', 0]\n               ],\n            color: '155, 89, 182'\n    },\n    Z: {\n        shape: [\n                \n                ['Z','Z', 0],\n                [0,'Z', 'Z'],\n                [0, 0, 0]\n               ],\n            color: '231, 76, 60'\n    }\n\n\n}\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino = \n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n}","import React from 'react'\nimport { StyledCell } from './styles/StyledCell.js'\nimport { TETROMINOS } from '../tetrominos.js'\n\nconst Cell = ({ type }) => (\n    <StyledCell type ={type} color={TETROMINOS[type].color}/>\n);\nexport default React.memo(Cell)","import styled from 'styled-components'\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap:1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    backgroud: #111;\n\n`;\n","import React from 'react'\nimport Cell from './Cell'\nimport { StyledStage } from './styles/StyledStage'\n\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage","import styled from 'styled-components'\n\nexport const StyledDisplay = styled.div `\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: 'IBM Plex Sans', sans-serif;\n    font-size: 1.2rem;\n`;","import React from 'react'\nimport { StyledDisplay} from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDisplay gameOver = {gameOver}>{text}</StyledDisplay>\n);\nexport default Display","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: 'IBM Plex Sans', sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton","import styled from 'styled-components'\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background-color: #dfe6e9;\n    background-size: cover;\n    overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`;","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage  = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    );\n\n    export const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n        for (let y = 0; y < player.tetromino.length; y += 1) {\n          for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            if (player.tetromino[y][x] !== 0) {\n              if (\n                !stage[y + player.pos.y + moveY] ||\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n                  'clear'\n              ) {\n                return true;\n              }\n            }\n          }\n        }\n        return false;\n    };","import { useState, useCallback }from 'react'\nimport { randomTetromino } from '../tetrominos'\nimport { STAGE_WIDTH , checkCollision } from '../gameHelpers'\n\nexport const usePlayer = () => {\n    const[player, setPlayer]= useState({\n        pos: { x: 0, y: 0},\n        tetromino: randomTetromino().shape,\n        collided: false\n    });\n\n    function rotate(matrix, dir) {\n        const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n        if (dir > 0) return mtrx.map(row => row.reverse());\n        return mtrx.reverse();\n      }\n    \n      function playerRotate(stage, dir) {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    \n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n          clonedPlayer.pos.x += offset;\n          offset = -(offset + (offset > 0 ? 1 : -1));\n          if (offset > clonedPlayer.tetromino[0].length) {\n            rotate(clonedPlayer.tetromino, -dir);\n            clonedPlayer.pos.x = pos;\n            return;\n          }\n        }\n        setPlayer(clonedPlayer);\n      }\n    \n    const updatePlayerPos = ({ x,y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    };\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false, \n        })\n    }, []);\n    \n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","import { useState, useEffect } from 'react'\nimport { createStage } from '../gameHelpers'\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};","import React, {useState} from 'react'\nimport Stage from './Stage'\nimport Display from './Display'\nimport StartButton from './StartButton'\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris.js'\nimport 'tachyons/css/tachyons.min.css'\n\n\nimport { createStage, checkCollision } from '../gameHelpers'\n\n\n//Hooks\nimport { usePlayer } from '../hooks/usePlayer'\nimport { useStage } from '../hooks/useStage'\nimport { useGameStatus } from '../hooks/useGameStatus'\nimport { useInterval } from '../hooks/useInterval'\n\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n  \n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n      rowsCleared\n    );\n  \n    console.log('re-render');\n  \n    const movePlayer = dir => {\n      if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n        updatePlayerPos({ x: dir, y: 0 });\n      }\n    };\n  \n    const keyUp = ({ keyCode }) => {\n      if (!gameOver) {\n        if (keyCode === 40) {\n          setDropTime(1000 / (level + 1));\n        }\n      }\n    };\n  \n    const startGame = () => {\n      setStage(createStage());\n      setDropTime(1000);\n      resetPlayer();\n      setScore(0);\n      setLevel(0);\n      setRows(0);\n      setGameOver(false);\n    };\n  \n    const drop = () => {\n      if (rows > (level + 1) * 10) {\n        setLevel(prev => prev + 1);\n        setDropTime(1000 / (level + 1) + 200);\n      }\n  \n      if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n        updatePlayerPos({ x: 0, y: 1, collided: false });\n      } else {\n        if (player.pos.y < 1) {\n          console.log('GAME OVER!!!');\n          setGameOver(true);\n          setDropTime(null);\n        }\n        updatePlayerPos({ x: 0, y: 0, collided: true });\n      }\n    };\n  \n    const dropPlayer = () => {\n      setDropTime(null);\n      drop();\n    };\n\n    useInterval(() => {\n      drop();\n    }, dropTime);\n  \n    const move = ({ keyCode }) => {\n      if (!gameOver) {\n        if (keyCode === 37) {\n          movePlayer(-1);\n        } else if (keyCode === 39) {\n          movePlayer(1);\n        } else if (keyCode === 40) {\n          dropPlayer();\n        } else if (keyCode === 38) {\n          playerRotate(stage, 1);\n        }\n      }\n    };\n  \n    return (\n      <StyledTetrisWrapper\n        role=\"button\"\n        tabIndex=\"0\"\n        onKeyDown={e => move(e)}\n        onKeyUp={keyUp}\n      >\n        <StyledTetris>\n          <Stage stage={stage} />\n          <aside>\n            {gameOver ? (\n              <Display gameOver={gameOver} text=\"Game Over\" />\n            ) : (\n              <div>\n                <Display text={`Score: ${score}`} />\n                <Display text={`rows: ${rows}`} />\n                <Display text={`Level: ${level}`} />\n              </div>\n            )}\n            <StartButton callback={startGame} />\n          </aside>\n        </StyledTetris>\n      </StyledTetrisWrapper>\n    );\n  };\n  \n  export default Tetris\n  ","import { useState, useEffect, useCallback } from 'react'\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react'\nimport Tetris from './components/Tetris'\nimport 'tachyons/css/tachyons.min.css'\n\nconst App= () => (\n <div className =\"fl w-100 pa2 center\">\n  <div className=\"App\">\n    <Tetris/>\n  </div>\n  </div>\n\n\n); \nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// import 'tachyons/css/tachyons.min.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}